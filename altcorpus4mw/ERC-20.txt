486	ERC-20
ERC-20 &&&&& Introduction &&&&& '''ERC-20''' is a technical standard used for smart contracts on the Ethereum blockchain for implementing tokens . The majority of tokens issued on the Ethereum blockchain are ERC-20 compliant. As of April 16, 2019, a total of 181,799 ERC-20 compatible tokens are found on Ethereum main network. &&&&& &&&&& ERC-20 defines a common list of rules for Ethereum tokens to follow within the larger Ethereum ecosystem, allowing developers to accurately predict interaction between tokens. These rules include how the tokens are transferred between addresses and how data within each token is accessed. &&&&& &&&&& History &&&&& ERC-20 was proposed on November 19, 2015, by Fabian Vogelsteller. It defines a common list of rules that an Ethereum token has to implement, giving developers the ability to program how new tokens will function within the Ethereum ecosystem. &&&&& &&&&& ''ERC'' is an acronym for ''Ethereum Request for Comment'', and ''20'' is the number that was assigned to the standard. &&&&& &&&&& Applications &&&&& As of April 16, 2019, there were 181,799 ERC-20 token contracts on the Ethereum blockchain, according to ''Etherscan.io''. &&&&& &&&&& === Initial coin offering === &&&&& &&&&& The ERC-20 token standard became popular with crowdfunding companies working on initial coin offering (ICO) cases due to the simplicity of deployment, together with its potential for interoperability with other Ethereum token standards. &&&&& &&&&& Among the most successful ERC20 token sales are EOS, TON, Tezos, and Filecoin, raising more than $200 million dollar each. &&&&& &&&&& === Wrapped ether === &&&&& Ethereum's native token, ether, does not conform to the ERC-20 standard. To enable the ability to use ether on platforms requiring ERC-20 compliance, users can convert ether to a "wrapped" token, commonly known as "WETH". The wrapped tokens are held in a smart contract which maintains a 1:1 peg to ether. &&&&& &&&&& Technical standard &&&&& The ERC-20 token standard has the following method-related functions: &&&&& &&&&& The specific wording of the function is followed by a clarification of what it does, in brackets &&&&& # totalSupply() public view returns (uint256 totalSupply) Get the total token supply &&&&& # balanceOf(address _owner) public view returns (uint256 balance) Get the account balance of another account with address ''_owner'' &&&&& # transfer(address _to, uint256 _value) public returns (bool success) Send ''_value'' amount of tokens to address ''_to'' &&&&& # transferFrom(address _from, address _to, uint256 _value) public returns (bool success)Send ''_value'' amount of tokens from address ''_from'' to address ''_to'' &&&&& # approve(address _spender, uint256 _value) public returns (bool success) Allow ''_spender'' to withdraw from your account, multiple times, up to the ''_value'' amount. If this function is called again it overwrites the current allowance with ''_value'' &&&&& # allowance(address _owner, address _spender) public view returns (uint256 remaining) Returns the amount which ''_spender'' is still allowed to withdraw from ''_owner'' &&&&& '''Events format:''' &&&&& # Transfer(address indexed _from, address indexed _to, uint256 _value). Triggered when tokens are transferred. &&&&& # Approval(address indexed _owner, address indexed _spender, uint256 _value)Triggered whenever ''approve(address _spender, uint256 _value)'' is called. &&&&& &&&&& References &&&&& &&&&& &&&&& &&&&& &&&&& &&&&& &&&&& 